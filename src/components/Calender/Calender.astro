---
import {Icon} from 'astro-icon/components'

interface Props {
    class?: string;
    id?: string;
    mode?: 'day' | 'week' | 'month' | 'year';
    selected?: `${number}-${NR<1, 12>}-${NR<1, 31>}`;
    firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    gap?: 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl' | '10xl';
}
type NR <
    Start extends number,
    End extends number,
    Arr extends unknown[] = [],
    Acc extends number = never
> = Arr['length'] extends End
    ? Acc | Start | End
    : NR < Start, End, [...Arr, 1], Arr[Start] extends undefined ? Acc : Acc | Arr['length'] >;
type Day = {day: number, date: Date};

const {
    class: className = '',
    id: alertId = '',
    mode = 'month',
    selected = new Date().toISOString().slice(0, 10),
    firstDayOfWeek = 0,
    gap = 'md',
} = Astro.props;
const gapStyle = {
    md: 'gap-2',
    lg: 'gap-4',
    xl: 'gap-6',
    '2xl': 'gap-8',
    '3xl': 'gap-10',
    '4xl': 'gap-12',
    '5xl': 'gap-14',
    '6xl': 'gap-16',
    '7xl': 'gap-18',
    '8xl': 'gap-20',
    '9xl': 'gap-22',
    '10xl': 'gap-24',
}
const calenderMode = {
    day: {col: 'grid-cols-1', row: 'grid-rows-1'},
    week: {col: 'grid-cols-1', row: 'grid-rows-1'},
    month: {col: 'grid-cols-7', row: 'grid-rows-6'},
    year: {col: 'grid-cols-4', row: 'grid-rows-3'},
};
const selectedDate = new Date(selected);

const returnWeek = (date: Date) => {
    const week: Day[] = [];
    const sunday = date.getDate() - date.getDay();
    for (let i = 0; i < 7; i++) {
        week.push({date: new Date(date.setDate(sunday + i)), day: date.getDay()});
    }
    return week;
}
const returnMonth = (date: Date) => {
    const month: Day[][] = [];
    const firstDate = new Date(date.getFullYear(), date.getMonth(), 1);
    const lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    const firstWeek = firstDate.getDay();
    const lastWeek = lastDate.getDay();
    const lastDay = lastDate.getDate();
    let week: Day[] = [];
    for (let i = 0; i < firstWeek; i++) {
        week.push({date: new Date(firstDate.setDate(firstDate.getDate() - 1)), day: firstDate.getDay()});
    }
    for (let i = 1; i <= lastDay; i++) {
        if (week.length === 7) {
            month.push(week);
            week = [];
        }
        week.push({date: new Date(date.getFullYear(), date.getMonth(), i), day: new Date(date.getFullYear(), date.getMonth(), i).getDay()});
    }
    for (let i = 0; i < 7 - lastWeek; i++) {
        if (week.length === 7) {
            month.push(week);
            week = [];
        }
        week.push({date: new Date(lastDate.setDate(lastDate.getDate() + 1)), day: lastDate.getDay()});
    }
    if (week.length > 0) {
        month.push(week);
    }
    return month;
}
const returnYear = (date: Date) => {
    const year: Day[][] = [];
    const firstDate = new Date(date.getFullYear(), 0, 1);
    const lastDate = new Date(date.getFullYear(), 11, 31);
    const firstWeek = firstDate.getDay();
    const lastWeek = lastDate.getDay();
    const lastDay = lastDate.getDate();
    let week: Day[] = [];
    for (let i = 0; i < firstWeek; i++) {
        week.push({date: new Date(firstDate.setDate(firstDate.getDate() - 1)), day: firstDate.getDay()});
    }
    for (let i = 1; i <= lastDay; i++) {
        if (week.length === 7) {
            year.push(week);
            week = [];
        }
        week.push({date: new Date(date.getFullYear(), date.getMonth(), i), day: new Date(date.getFullYear(), date.getMonth(), i).getDay()});
    }
    for (let i = 0; i < 7 - lastWeek; i++) {
        if (week.length === 7) {
            year.push(week);
            week = [];
        }
        week.push({date: new Date(lastDate.setDate(lastDate.getDate() + 1)), day: lastDate.getDay()});
    }
    if (week.length > 0) {
        year.push(week);
    }
    return year;
}

const calender = {
    day: [{date: selectedDate, day: selectedDate.getDay()}],
    week: [returnWeek(selectedDate)],
    month: [returnMonth(selectedDate)],
    year: [returnYear(selectedDate)],
}
---

<div data-mode={mode}
     data-selected={selectedDate}
     data-first-day-of-week={firstDayOfWeek}
     class={`flex flex-col justify-center items-center py-4 px-6 rounded-lg border border-sky-200 shadow-lg shadow-sky-500/20 ${className}`}
     id={`${alertId}`}>
    <div class="flex items-center justify-between pb-4">
        <Icon name="ic:round-chevron-left" class="w-10 h-10 cursor-pointer"/>
        <div class="title"/>
        <Icon name="ic:round-chevron-right" class="w-10 h-10 cursor-pointer"/>
    </div>
    <div class={`grid ${gapStyle[gap]} ${calenderMode[mode].row}`}>
        {mode == "day" ?
            calender.day.map((row: Day) => {
                return (
                        <div class={`grid ${gapStyle[gap]} ${calenderMode[mode].col} text-sky-400`}>
                            <div class="day">
                                {row.date.getDate()}
                            </div>
                        </div>
                )
            })
            : calender[mode].map((row: Day[] | Day[][]) => {
            return row.map((col: Day | Day[]) => {
                return (
                        <div class={`grid ${gapStyle[gap]} ${calenderMode[mode].col} text-sky-400`}>
                            {Array.isArray(col) ?
                                col.map((date: Day) => {
                                    return (
                                            <div class={`${date.date.getDate() === selectedDate.getDate() ? "today" : ""} ${date.date.getMonth() != selectedDate.getMonth() ? "noday" : "day"}`}>
                                                {date.date.getDate()}
                                            </div>
                                    )
                                }) :
                                    <div class={`${col.date.getDate() === selectedDate.getDate() ? "today" : ""} ${col.date.getMonth() != selectedDate.getMonth() ? "noday" : "day"}`}>
                                        {col.date.getDate()}
                                    </div>
                            }
                        </div>
                )
            })
        })}
    </div>
</div>

<script>
</script>

<style lang="postcss">
    .noday {
        @apply text-sky-200 flex justify-center items-center;
    }

    .day {
        @apply relative flex justify-center items-center text-sky-400 cursor-pointer;

        &::before {
            @apply content-none w-8 h-8 rounded-full transition-colors duration-75 hover:bg-sky-500/10;
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }

    .today {
        @apply relative;

        &::before {
            @apply bg-sky-500/30 w-8 h-8 rounded-full;
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
</style>