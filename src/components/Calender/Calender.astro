---
import {Icon} from 'astro-icon/components'
import Day from './Day.astro'
interface Props {
    class?: string;
    id?: string;
    mode?: 'day' | 'week' | 'month' | 'year';
    selected?: string;
    firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
}
const {
    class: className = '',
    id: alertId = '',
    mode = 'month',
    selected = '',
    firstDayOfWeek = 0,
} = Astro.props;
const calender = {
    day: 'grid-cols-1',
    week: 'grid-cols-7',
    month: 'grid-rows-6',
    year: 'grid-cols-4',
};
const selectedDate = new Date(selected);
---

<div data-mode={mode}
     data-selected={selectedDate}
     data-first-day-of-week={firstDayOfWeek}
     class={`flex flex-col justify-center items-center py-4 px-6 rounded-lg border border-sky-200 shadow-lg shadow-sky-500/20 ${className}`}
     id={`${alertId}`}>
    <div class="flex items-center justify-between">
        <Icon name="ic:round-chevron-left" class="w-12 h-12 cursor-pointer"/>
        <div class="title"/>
        <Icon name="ic:round-chevron-right" class="w-12 h-12 cursor-pointer"/>
    </div>
    <div class={`calender ${calender[mode]}`}/>
</div>

<script>
    const calender = document.querySelectorAll('[data-mode]');
    calender.forEach(cal => {
        const mode = cal.getAttribute('data-mode');
        const selected = cal.getAttribute('data-selected') || new Date();
        const firstDayOfWeek = cal.getAttribute('data-first-day-of-week') || 0;
        const titleElement = cal.querySelector('.title');
        const calenderElement = cal.querySelector('.calender');
        if (titleElement && calenderElement) {
            const title = new Date(selected);
            if (mode === 'day') {
                titleElement.innerHTML = `${title.getFullYear()}年 ${title.getMonth() + 1}月 ${title.getDate()}日`;
                calenderElement.innerHTML = `<Day class="day">${title.getDate()}</Day>`;
            } else if (mode === 'week') {
                titleElement.innerHTML = `${title.getFullYear()}年 ${title.getMonth() + 1}月 ${title.getDate()}日`;
                const firstDate = new Date(title.getFullYear(), title.getMonth(), title.getDate() - title.getDay());
                const calender = [];
                for (let i = 0; i < 7; i++) {
                    const day = new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i);
                    calender.push(`<Day class="text-sky-500">${day.getDate()}</Day>`);
                }
                calenderElement.innerHTML = calender.join('');
            } else if (mode === 'month') {
                titleElement.innerHTML = `${title.getFullYear()}年 ${title.getMonth() + 1}月`;
                const firstDate = new Date(title.getFullYear(), title.getMonth(), 1);
                const lastMonth = new Date(title.getFullYear(), title.getMonth(), 0);
                const previousMonthDays = (firstDate.getDay() - Number(firstDayOfWeek) + 7) % 7;
                const totalDaysInMonth = new Date(title.getFullYear(), title.getMonth() + 1, 0).getDate();

                const calender = [];
                for (let i = 0; i < 6; i++) {
                    calender.push('<div class="grid grid-cols-7 py-1 gap-2">');
                    for (let j = 0; j < 7; j++) {
                        const dayIndex = i * 7 + j;
                        if (dayIndex < previousMonthDays) {
                            const day = lastMonth.getDate() - previousMonthDays + dayIndex + 1;
                            calender.push(`<Day class="text-sky-200 noToMonth">${day}</Day>`);
                        } else if (dayIndex < previousMonthDays + totalDaysInMonth) {
                            const day = dayIndex - previousMonthDays + 1;
                            if (day === title.getDate() && title.getMonth() === title.getMonth() && title.getFullYear() === title.getFullYear()) {
                                calender.push(`<Day class="text-sky-500" isToday>${day}</Day>`);
                            } else {
                                calender.push(`<Day class="text-sky-500">${day}</Day>`);
                            }
                        } else {
                            const day = dayIndex - (previousMonthDays + totalDaysInMonth) + 1;
                            calender.push(`<Day class="text-sky-200 noToMonth">${day}</Day>`);
                        }
                    }
                    calender.push('</div>');
                }

                if (firstDate.getDay() === 0) {
                    const extraWeek = [];
                    for (let j = 0; j < 7; j++) {
                        const day = lastMonth.getDate() - 6 + j;
                        extraWeek.push(`<Day class="text-sky-200 noToMonth">${day}</Day>`);
                        calender.pop();
                    }
                    calender.pop();
                    calender.unshift('<div class="grid grid-cols-7 py-1 gap-2">' + extraWeek.join('') + '</div>');
                }

                calenderElement.innerHTML = calender.join('');
            } else if (mode === 'year') {
                titleElement.innerHTML = `${title.getFullYear()}年`;
                const calender = [];
                for (let i = 0; i < 12; i++) {
                    calender.push(`<div class="month">${i + 1}</div>`);
                }
                calenderElement.innerHTML = calender.join('');
            }
        }
    });
</script>