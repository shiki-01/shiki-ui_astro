---
interface Props {
    class?: string;
    variant?: 'primary' | 'secondary' | "outline" | "link" | "none";
    radius?: 'rounded' | 'full' | 'none'
    disabled?: boolean;
    onclick?: () => void;
}
const {
    class: className,
    variant = 'none',
    radius = "rounded",
    disabled = false,
    onclick,
} = Astro.props;
const classes = {
    primary: 'bg-sky-500 text-white shadow-sky-500/50 hover:bg-sky-400 hover:shadow-sky-500/40',
    secondary: 'bg-gray-500 text-white shadow-gray-500/50 hover:bg-gray-400 hover:shadow-gray-500/40',
    outline: 'border border-sky-500 text-sky-500 shadow-sky-500/20 hover:bg-sky-500 hover:text-white hover:shadow-md hover:shadow-sky-500/40',
    link: 'text-sky-500 hover:text-sky-400 shadow-none hover:shadow-none link px-2',
    none: 'text-sky-500 hover:text-sky-400 shadow-none hover:shadow-none',
};
const radii = {
    rounded: 'rounded-md',
    full: 'rounded-full',
    none: '',
};
---

<button class={`px-4 py-2 shadow-md transition-all duration-300 ${disabled ? "cursor-not-allowed" : "cursor-pointer hover:shadow-lg"} ${classes[variant]} ${radii[radius]} ${className}`}
        id="handleClick"
        disabled>
    <slot/>
</button>

<script>
    const element = document.getElementById('handleClick');
    if (element) {
        element.addEventListener('click', () => {
            if (Astro.props.onclick) {
                Astro.props.onclick();
            }
        });
    }
</script>

<style>
    .link {
        position: relative;
    }

    .link::after {
        @apply bg-sky-400 h-[1.2px];
        content: '';
        position: absolute;
        display: flex;
        width: 100%;
        bottom: 0;
        left: 0;
        transform: scaleX(0);
        transform-origin: left top;
        transition: transform 0.3s ease-out;
    }

    .link:hover::after {
        transform: scaleX(1);
    }
</style>