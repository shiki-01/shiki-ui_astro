---
interface Props {
    class?: string;
    variant?: 'primary' | 'secondary' | "outline" | "link" | "none";
    radius?: 'rounded' | 'full' | 'none'
    disabled?: boolean;
}
const {class: className, variant = 'none', radius = "rounded", disabled = false} = Astro.props;
const classes = {
    primary: 'bg-sky-500 text-white shadow-sky-500/50 hover:bg-sky-400 hover:shadow-sky-500/40',
    secondary: 'bg-gray-500 text-white shadow-gray-500/50 hover:bg-gray-400 hover:shadow-gray-500/40',
    outline: 'border border-sky-500 text-sky-500 shadow-sky-500/20 hover:bg-sky-500 hover:text-white hover:shadow-md hover:shadow-sky-500/40',
    link: 'text-sky-500 hover:text-sky-400 shadow-none hover:shadow-none link hover:link-hover',
    none: 'text-sky-500 hover:text-sky-400 shadow-none hover:shadow-none',
};
const radii = {
    rounded: 'rounded-md',
    full: 'rounded-full',
    none: '',
};
---

{disabled ? (
    <button class={`px-4 py-2 shadow-md transition-all duration-300 ${classes[variant]} ${radii[radius]} cursor-not-allowed ${className}`} disabled>
        <slot />
    </button>
) : (
    <button class={`px-4 py-2 shadow-md hover:shadow-lg transition-all duration-300 ${classes[variant]} ${radii[radius]} ${className}`}>
        <slot/>
    </button>
)}

<style>
    .link {
        position: relative;
        border-bottom: none;
        transition: all 0.3s;
    }
    .link-hover::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 1px;
        bottom: 0;
        left: 0;
        background-color: currentColor;
        transform: scaleX(0);
        transform-origin: right;
        transition: transform 0.3s ease-out;
    }
    .link:hover::after {
        transform: scaleX(1);
        transform-origin: left;
    }
</style>